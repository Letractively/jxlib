#summary Creating a Image Viewer Application Using jxlib (In Progress)

= Getting Started =

JX.Layout uses the DOM elements in your document as reference points for your application, In this exercise we are going to create a Layout which houses two columns inside the browser window. 

To start we need to include the JX.Lib in the head section of our document:
{{{
<html>
	<head>
	<title>Creating a Image Viewer Application Using JX.Layout</title>
	<script src="jxlib.uncompressed.js" type="text/javascript" charset="utf-8"></script>
	</head>
	<body>
	</body>
</html>
}}}

= A Layout For The Application =

http://jxlib.googlecode.com/svn/wiki/images/layout.png

There are three elements that are needed to create this layout:

  # The Page Container (red)
  # Left Column (green)
  # Right Column (blue)

== The Page Container ==

This main page container houses the two child containers these children are the basis for the column's (left and right). 
{{{
<body>
    <div id="thePage">
        <div id="leftLayout"></div>
        <div id="rightLayout"></div>
    </div>
</body>
}}}
We want to have a left column which is more narrow then the right column see the above illustration of our intended layout. 

Here is how we initialize this layout:
{{{
<script  type="text/javascript">
window.addEvent('load', function() {

    var mainContainer = new Jx.Layout('thePage', {bottom: 35}); 
    var leftLayout = new Jx.Layout('leftLayout', {width: 200, left: 0, right: null, top: 35, bottom: 0, minWidth: 100});
    var rightLayout = new Jx.Layout('rightLayout',  {width: null, left: 200, right: 0, top: 35, bottom: 0});
    mainContainer.resize();
</script>
}}}


== The onLoad Event ==

What we need to do here is add a event handler to the “onLoad” event see http://www.w3.org/TR/REC-html40/interact/scripts.html#h-18.2.3 for more information the DOM and event handler's

Using this window.addEvent method instead of window.onLoad = function(){} allows script independence for other onLoad items you might want to happen within the onLoad event.

You could use  window.onLoad = function(){...} however no other script will be attached to the window.onLoad event.  other then what is defined in that function.

== Building the Layout (Jx.Layout) ==
Now what is needed is for us to specify how Jx.Layout is going to behave. Using  a main container and a left and right container  we can specify it's default dimensions
{{{
       var leftLayout = new Jx.Layout('leftLayout', {width: 200, left: 0, right: null, top: 35, bottom: 0, minWidth: 100});
    var rightLayout = new Jx.Layout('rightLayout',  {width: null, left: 200, right: 0, top: 35, bottom: 0});
}}}
In Jx.Layout a width or height of “null” tells jx.layout to fill it with all the available space. 

Now that we have setup our basic layout lets go ahead and add some style properties so we can see what it is doing
{{{
<style type="text/css">
/*
    The Main Page Container
*/
#thePage {
  border: 1px solid red;
  margin: 10px;
  padding: 10px;
}

/*
    The Left Side:
*/

#leftLayout {
  border: 1px solid green;
}

/*
    The Right Side:
*/

#rightLayout {
  border: 1px solid blue;
}
</style>
}}}
We should now have something that looks like this:

http://jxlib.googlecode.com/svn/wiki/images/layout.png

== Creating the ToolBar (Jx.Toolbar) ==

Our little application is going to need a menu in a toolbar so lets add that at the top of the application adding a div “theToolBar” inside “thePage”:
{{{
<body>
    <div id="thePage">
        <div id="theToolBar"></div>
        <div id="leftLayout"></div>
        <div id="rightLayout"></div>
    </div>
</body>
}}}
We're going to have to adjust our JX.Layout to accommodate this toolbar
{{{
    var mainContainer = new Jx.Layout('thePage', {bottom: 35});
    var theToolBar = new Jx.Layout('theToolBar', {width: null, height:35, left: 0, right: null, top: 0, bottom: 0, minWidth: 100});
    var leftLayout = new Jx.Layout('leftLayout', {width: 200, left: 0, right: null, top: 35, bottom: 0, minWidth: 100});
    var rightLayout = new Jx.Layout('rightLayout',  {width: null, left: 200, right: 0, top: 35, bottom: 0});
}}}
As you can see I simply added a new JX.Layout item and set it's height to be 35 and then adjusted leftLayout and rightLayout to have a top of 35. Now lets add the JX.Toolbar :
{{{
    var theToolBar = new Jx.Toolbar({parent: 'theToolBar'});
}}}

== Adding the Menu (JX.Menu) ==

Now that we have a toolbar we can add a menu to it. JXMenus can get complicated based on the levels of nesting etc. but for this exercise lets create a options menu and a help menu. 
{{{
    // create the root menu item container
    var optionMenu = new Jx.Menu({label: 'Options'});

    // create menu item
    var menuitem1 = new Jx.Menu.Item({
      label: ' Display Settings',
      onClick:function(){alert('One way to skin a cat')}
    });

    // add the menu item to the menu container
    optionMenu.add(menuitem1);

    // add the menu to the toolbar
    theToolBar.add(fileMenu);
}}}
and now the help menu:
{{{
     // create the root menu item container
    var helpMenu = new Jx.Menu({label: 'Help'});
    // create menu item
    var menuItem1 = new Jx.Menu.Item({
        label: 'Info' ,
        onClick:myInfoFunction.bind()
    });
    // create menu item
    var menuItem2 = new Jx.Menu.Item({label: 'About'});

    // add the menu item to the menu container
    helpMenu.add(menuItem1,menuItem2);
    
    // add the menu to the toolbar
    theToolBar.add(helpMenu);
}}}

Notice in both these menus we have a different onClick value, The beauty in JS in general is that there are usually numerous ways you can implement the same thing and this is also the case in JX. 

You can either use function() and create an inline function object or call the function using a prototypic style with bind() though what is missing here is the bound function:
{{{
    function myInfoFunction(){
        alert("another.. way to skin a cat");
    }
}}}

Now that we added this JX.toolbar we should have something that resembles this:

http://jxlib.googlecode.com/svn/wiki/images/layout1.png

== Creating the tree ==

We'll use JX.tree for the image navigation.

=== Getting the tree data ===
in our JavasScript now we need to add a couple functions 

=== updateTree() ===
With this function we trigger a ajax call to our getImages.php script which returns a json array of the images in our ./samples/ directory. It fetches that json array and fires updateTree_CB with the object.

{{{

function updateTree(){

    // get the file listings in a JSON Array from "getImages.php"
    new Request({url:"./getImages.php", onComplete: updateTree_CB}).send();
}
}}}

=== updateTree_CB(oObject) ===
Using the json from our last function call we can now set our global var gaImages to this data and begin the buildTree function. Notice there is not any trapping here for errors. 

{{{
function updateTree_CB(oObject){
    // create / set the images global
    eval("gaImages = "+oObject);

    // call buildTree and start working with Jx.Tree
    buildTree();
}
}}}

=== buildTree() ===

This function is the meat and potatoes of our tree. simply put it creates the main Jx.Tree Object and adds a Jx.TreeFolder to it and cycles through our gaImages array adding Jx.TreeItem's in the folder.

We are going to add a eventListener for the click event on the Jx.TreeItem's that we create here, which then in turn call our next function "treeItemClicked" with the Jx.treeItem object so we can know which item has been clicked. 

Here's the updated HTML:
{{{
<body>
    <div id="thePage">
        <div id="theToolBar"></div>
        <div id="leftLayout">
            <div id="treeArea"></div>
        </div>
        <div id="rightLayout">
            <img id="largeImage" src="">
        </div>
    </div>
</body>
}}}
and it's javascript:
{{{
function buildTree(){

    // create the root Jx.Tree
    var tree = new Jx.Tree('treeArea');

    // create a folder to be added to Jx.Tree
    var folder = new Jx.TreeFolder({
        label: 'My Folder',
        image: 'images/blue_folder.png',
        imageClass: 'blueFolder'
    });

    // add the folder to the tree
    tree.append(folder);

    // cycle through the global gaImages and add Jx.TreeItem's 
    for(var i=0;i<gaImages.length;i++){
        var item = new Jx.TreeItem({
            label: gaImages[i]
        });
        
        // create a evenListener for click on the JX.TreeItem Dom Object. fire "treeItemClicked Func and bind the treeItem Object"
        item.domObj.addEvent('click', treeItemClicked.bind(item));

        // add the item to the folder
        folder.append(item);
    }
}
}}}

=== treeItemClicked(){ ===

We have couple new globals here, we will set gImageFileName so we can track the active filename we are viewing. also not yet discussed is the global "gFitToWindow" I going under the assumption that we would want the image to fit inside of the rightLayout window.  Later we will create a menu item to toggle this global. 

This function works like this:

  # set the global so we know what filename is active
  # check to see if gFitToWindow is true/false
  # if true is sets the image src to our viewImage.php script to resample the image
  # if false it sets the image src to the image itself
  # then trigger the "treeItemClicked_CB" function with the EXIF data from the selected image

{{{
function treeItemClicked(){
    // store the active fileName in a global
    gImageFileName = this.options.label;

    // see what the width of the rightLayout is set to currently minus the scalebar width
    var divWidth = $('rightLayout').offsetWidth-17;

    // if the global gFitToWindow is set to true then we will resize the images on the fly to fit in the rightLayout
    if(gFitToWindow == true){
        $('largeImage').src = "./viewImage.php?f="+gImageFileName+"&w="+divWidth;
    }
    else
    {
        // just change the src of the image. 
        $('largeImage').src = "./samples/"+gImageFileName
    }
    
    // get the exif Data for the image
    new Request({url:"./getImages.php?exif="+this.options.label, onComplete: treeItemClicked_CB}).send();
}
}}}

=== Jx.Splitter ===
We want to also show the loaded images exif data so we will add a splitter in the leftLayout for the tree and exif data to apear. 

Lets define our splitter just below the Jx.Layout section:
{{{
    new Jx.Splitter('leftLayout', {
      elements: ['treeArea','exifArea'],
      containerOptions: [{height:300}],
      layout: 'vertical',
    });
}}}
Splitter as well as a lot of the components have a few different techniques you can use to implement the components so do checkout the API documentation. 

= Adding some substance to this application =

Now that we have a rough layout we can start implementing some core functionality to it. 

I created a couple php scripts for this application: 

  # getImages.php 
  # viewImage.php

== getImages.php == 

This script returns a JSON list of JPG files in our ./samples/ directory. It also is used to fetch the files EXIF data so we can view some stats on the viewed JPG. 

By defult this script returns a json array of the images in this directory. If you specify 
exif=[filename] it will return a json object of the specified filename. 


== viewImage.php ==

viewImage.php uses gd to resize the viewed image to the leftLayout's width 

  # Retuns a list of images located in ./samples/
  # Retreive's the EXIF data from a file.


== Review == 

So at this point we should have a fluid application that resized in the browser window with a left and right layout. A toolbar with a menu and a tree of our images with a splitter. 



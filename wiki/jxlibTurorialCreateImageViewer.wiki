#summary Creating a Image Viewer Application Using jxlib (In Progress)

= Getting Started =

JX.Layout uses the DOM elements in your document as reference points for your application, In this exercise we are going to create a Layout which houses two columns inside the browser window. 

To start we need to include the JX.Lib in the head section of our document:
{{{
<html>
	<head>
	<title>Creating a Image Viewer Application Using JX.Layout</title>
	<script src="jxlib.uncompressed.js" type="text/javascript" charset="utf-8"></script>
	</head>
	<body>
	</body>
</html>
}}}

= A Layout For The Application =

PaulInsertImageHere

There are three elements that are needed to create this layout:

  # The Page Container (red)
  # Left Column (green)
  # Right Column (blue)

== The Page Container ==

This main page container houses the two child containers these children are the basis for the column's (left and right). 
{{{
<body>
    <div id="thePage">
        <div id="leftLayout"></div>
        <div id="rightLayout"></div>
    </div>
</body>
}}}
We want to have a left column which is more narrow then the right column see the above illustration of our intended layout. 

Here is how we initialize this layout:
{{{
<script  type="text/javascript">
window.addEvent('load', function() {
    var mainContainer = new Jx.Layout('thePage', {bottom: 35});
    var leftLayout = new Jx.Layout('leftLayout', {width: 200, left: 0, right: null, top: 0, bottom: 0, minWidth: 100});
    var rightLayout = new Jx.Layout('rightLayout',  {width: null, left: 200, right: 0, top: 0, bottom: 0});
    mainContainer.resize();
</script>
}}}

We set the mainContainer to have just the bottom property (we'll get to that later) and the leftContariner is to have a width of 200px positioned a left:0px and top:0px.

rightContainer has a position of left:200px top:px with a width of 'null' this tells jx.Layout to use all the remaining horizontal space for this container.

== The onLoad Event ==

What we need to do here is add a event handler to the “onLoad” event see http://www.w3.org/TR/REC-html40/interact/scripts.html#h-18.2.3 for more information the DOM and event handler's

Using this window.addEvent method instead of window.onLoad = function(){} allows script independence for other onLoad items you might want to happen within the onLoad event.

You could use  window.onLoad = function(){...} however no other script will be attached to the window.onLoad event.  other then what is defined in that function.

== Building the Layout (Jx.Layout) ==
Now what is needed is for us to specify how Jx.Layout is going to behave. Using  a main container and a left and right container  we can specify it's default dimensions
{{{
    var leftLayout = new Jx.Layout('leftLayout', {width: 200, left: 0, right: null, top: 0, bottom: 0, minWidth: 100});
    var rightLayout = new Jx.Layout('rightLayout',  {width: null, left: 200, right: 0, top: 0, bottom: 0});
}}}
In Jx.Layout a width or height of “null” tells Layoout to fill it with all the available space. 

Now that we have setup our basic layout lets go ahead and add some style properties so we can see what it is doing
{{{
<style type="text/css">
/*
    The Main Page Container
*/
#thePage {
  border: 1px solid red;
  margin: 10px;
  padding: 10px;
}

/*
    The Left Side:
*/

#leftLayout {
  border: 1px solid green;
}

/*
    The Right Side:
*/

#rightLayout {
  border: 1px solid blue;
}
</style>
}}}
We should now have something that looks like this:

PaulInsertImage

== Creating the ToolBar (Jx.Toolbar) ==

Our little application is going to need a menu in a toolbar so lets add that at the top of the application adding a div “theToolBar” inside “thePage”:
<body>
    <div id="thePage">
        <div id="theToolBar"></div>
        <div id="leftLayout"></div>
        <div id="rightLayout"></div>
    </div>
</body>
We're going to have to adjust our JX.Layout to accommodate this toolbar
{{{
    var mainContainer = new Jx.Layout('thePage', {bottom: 35});
    var theToolBar = new Jx.Layout('theToolBar', {width: null, height:35, left: 0, right: null, top: 0, bottom: 0, minWidth: 100});
    var leftLayout = new Jx.Layout('leftLayout', {width: 200, left: 0, right: null, top: 35, bottom: 0, minWidth: 100});
    var rightLayout = new Jx.Layout('rightLayout',  {width: null, left: 200, right: 0, top: 35, bottom: 0});
}}}
As you can see I simply added a new JX.Layout item and set it's height to be 35 and then adjusted leftLayout and rightLayout to have a top of 35. Now lets add the JX.Toolbar :
{{{
    var theToolBar = new Jx.Toolbar({parent: 'theToolBar'});
}}}

== Adding the Menu (JX.Menu) ==

Now that we have a toolbar we can add a menu to it. JXMenus can get complicated based on the levels of nesting etc. but for this exercise lets create a file menu and a help menu. 
{{{
    // create the root menu item container
    var fileMenu = new Jx.Menu({label: 'File', image: '../../images/tree_page.png'});

    // create menu item
    var menuitem1 = new Jx.Menu.Item({
      label: ' Open',
      image: '../../images/tree_page.png',
      onClick:function(){alert('One way to skin a cat')}
    });

    // add the menu item to the menu container
    fileMenu.add(menuitem1);

    // add the menu to the toolbar
    theToolBar.add(fileMenu);
}}}
and now the help menu:
{{{
     // create the root menu item container
    var helpMenu = new Jx.Menu({label: 'Help', image: '../../images/tree_page.png'});

    // create menu item
    var menuItem1 = new Jx.Menu.Item({
        label: 'Info' ,
        onClick:myInfoFunction.bind()
    });
    // create menu item
    var menuItem2 = new Jx.Menu.Item({label: 'About'});

    // add the menu item to the menu container
    helpMenu.add(menuItem1,menuItem2);
    
    // add the menu to the toolbar
    theToolBar.add(helpMenu);
}}}

Notice in both these menus we have a different onClick value, The beauty in JS in general is that there are usually numerous ways you can implement the same thing and this is also the case in JX. 

You can either use function() and create an inline function object or call the function using a prototypic style with bind() though what is missing here is the bound function:
{{{
    function myInfoFunction(){
        alert("another.. way to skin a cat");
    }
}}}